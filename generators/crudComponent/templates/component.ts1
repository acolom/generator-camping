/*
Generated by Generator-Camping
GeneratorName crudComponent Template: component.ts1 FileVersion: 0.0.1
 */
import * as angular from 'angular'
<% if (service) { %>import { <%= Name %>Service } from './<%= name %>.service' <% } %>
import template from './<%= name %>.component.html'
import { KrAlert } from 'krUi/krAlert.service'
<% if (css) { %>import "./<%= name %>.component.scss"<% } %>
<% if (!index) { %>
//import {  configrueComponent<%= Name %> } from './<%= name %>.component';
//configureComponent<%= Name %>(module);
<% } %>

class Controller {

    warningDeleteTitle:string = "Eliminar elemento";
    warningDeleteConfirmButtonText:string = "Eliminar";
    warningDelelteMessage(item) {
      return   `Esta seguro que desea eliminar: ${item.descripcion}`
    };

    textoTituloFormEditar = 'Edici√≥n de <%= name %>';
    textoTituloListadoElementos = 'Listado <%= name %>';

    constructor(
        <% if (service) { %> private <%= name %>Service: <%= Name %>Service, <% } %> 
        private krAlert: KrAlert) {
        "ngInject";
    }

    gridOptions: kendo.ui.GridOptions;
    grid: kendo.ui.Grid;
    editItem: any;
    formEdit: ng.IFormController;

    $onInit() {

        //Creamos las columnas del grid
        var columns: kendo.ui.GridColumn[] = [{
            field: 'nombre', title: 'Nombre',
            field: 'descripcion', title: 'Descripcion'
        }];    

        //Asignamos las propiedades al grid
        this.gridOptions = this.<%= name %>Service.getGridOptions({
            columns: columns
        });
    }

    onGetContextMenu(dataItem) {
        return [
                text: "Crear nuevo",
                click: () => {
                    this.onAddItem()
                }
            },
                text: "Editar: " + dataItem.nombre,
                click: () => {
                    this.onEditItem(dataItem);
                }
            }, {
                text: "Eliminar: " + dataItem.nombre,
                click: () => {
                    this.onDeleteItem(dataItem);
                }
            }
        ];
    }

    onAddItem() {
        this.editItem = {};
    }

    onEditItem(dataItem) {
        //Deberiamos hacer un get para no trabajor con datos desactualizados
        //o meter un rowversion
        let it = dataItem;
        if (angular.isFunction(it.toJSON)) {
            it = it.toJSON()
        }
        this.editItem = angular.copy(it);
    }

    onDeleteItem(dataItem) {
        return this.krAlert.warning(this.warningDeleteTitle,this.warningDelelteMessage(dataItem), 
            {
                showCancelButton: true,
                showConfirmButton: true,
                confirmButtonText: this.warningDeleteConfirmButtonText
            })
            .then(() => this.<%= name %>Service.delete(dataItem.id))
            .then(() => this.reload());


    }

    cancelEdit() {
        this.editItem = null;
    }

    save() {
        let prom: ng.IPromise<any>;
        if (this.editItem && this.editItem.id) {
            prom = this.<%= name %>Service.update(this.editItem.id, this.editItem);
        } else if (this.editItem) {
            prom = this.<%= name %>Service.save(this.editItem);
        }

        if (prom) {
            prom.then(() => this.reload())
                .then(() => this.cancelEdit());
        }
    }


    reload() {
        this.grid.dataSource.read();
    }
    
}
let comp = {
    controller: Controller,
    template: template
};


const componentName = '<%= name %>'
function configureComponent<%= Name %> (ngModule: ng.IModule)  {
    ngModule.component(componentName, comp);
}

export {configureComponent<%= Name %> }

